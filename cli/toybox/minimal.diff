--- toybox-0.8.12/Makefile	2025-01-18 20:20:33.000000000 +0000
+++ toybox-0.8.12/Makefile	2025-06-12 16:16:12.065011063 +0000
@@ -5,13 +5,16 @@
 # Note that CC defaults to "cc" so the one in configure doesn't get
 # used when scripts/make.sh and such called through "make".
 
-HOSTCC?=cc
+HOSTCC?=${CC}
+V=1
+STRIP=false
+CFLAGS=-Os
 
 export CROSS_COMPILE CFLAGS OPTIMIZE LDOPTIMIZE CC HOSTCC V STRIP ASAN
 
 all: toybox
 
 KCONFIG_CONFIG ?= .config
 
 toybox generated/unstripped/toybox: $(KCONFIG_CONFIG) *.[ch] lib/*.[ch] toys/*/*.c scripts/*.sh Config.in
 	scripts/make.sh

--- toybox-0.8.12/scripts/make.sh	2025-01-18 20:20:33.000000000 +0000
+++ -	2025-06-12 16:59:02.152815512 +0000
@@ -60,15 +60,8 @@
 # --as-needed removes libraries we don't use any symbols out of, but the
 # compiler has no way to ignore a library that doesn't exist, so detect
 # and skip nonexistent libraries for it (probing in parallel).
-LIBRARIES=$(
-  [ -z "$V" ] && X=/dev/null || X=/dev/stderr
-  for i in util crypt m resolv selinux smack attr crypto z log iconv tls ssl
-  do
-    do_loudly ${CROSS_COMPILE}${CC} $CFLAGS $LDFLAGS -xc - -l$i >>$X 2>&1 \
-      -o /dev/null <<<"int main(int argc,char*argv[]){return 0;}" &&
-      echo -l$i &
-  done | sort | xargs
-)
+LIBRARIES="-lm"
+
 # Actually resolve dangling dependencies in extra libraries when static linking
 [ -n "$LIBRARIES" ] && [ "$LDFLAGS" != "${LDFLAGS/-static/}" ] &&
   LIBRARIES="-Wl,--start-group $LIBRARIES -Wl,--end-group"
--- toybox-0.8.12/scripts/mkflags.c	2025-06-12 17:43:39.654997261 +0000
+++ -	2025-06-12 18:13:22.697020823 +0000
@@ -164,6 +164,7 @@
 int main(int argc, char *argv[])
 {
   char command[256], flags[1024], allflags[1024];
+  char oneTime[2350];
   char *out, *outbuf = malloc(1024*1024);
 
   // Yes, the output buffer is 1 megabyte with no bounds checking.
@@ -179,8 +180,37 @@
     unsigned bit;
 
     *command = *flags = *allflags = 0;
-    bit = fscanf(stdin, "%255s \"%1023[^\"]\" \"%1023[^\"]\"\n",
-                    command, flags, allflags);
+    *oneTime = 0;
+    fgets(oneTime, 2304, stdin);
+    unsigned zi, zj;
+    for(zi = 0, zj = 0; zi < 256; ++zi, ++zj) {
+        if(oneTime[zj] == ' ') {
+            break;
+        }
+        command[zi] = oneTime[zj];
+    }
+    command[zi] = '\0';
+    zi = 0;
+    zj += 2;
+    for(zi = 0; zi < 1024; ++zi, ++zj) {
+        if(oneTime[zj] == '"') {
+            break;
+        }
+        flags[zi] = oneTime[zj];
+    }
+    flags[zi] = '\0';
+    zi = 0;
+    zj += 3;
+    for(zi = 0; zi < 1024; ++zi, ++zj) {
+        if(oneTime[zj] == '"') {
+            break;
+        }
+        allflags[zi] = oneTime[zj];
+    }
+    allflags[zi] = '\0';
+    /* bit = sscanf(oneTime, "%s \"%s\" \"%s\"\n",
+                    command, flags, allflags); */
+    bit = 3;
     octane(flags);
     octane(allflags);

--- toybox-0.8.12/lib/portability.h	2025-06-12 18:18:25.285364270 +0000
+++ -	2025-06-12 18:18:29.247875908 +0000
@@ -53,6 +53,12 @@
 // This lets us determine what libc we're using: systems that have <features.h>
 // will transitively include it, and ones that don't (macOS) won't break.
 #include <sys/types.h>
+#ifdef __COSMOPOLITAN__
+#include "libc/sysv/consts/at.h"
+#include "libc/sysv/consts/rlimit.h"
+#include "libc/sysv/consts/sched.h"
+#include "libc/calls/struct/statfs.h"
+#endif
 
 // Various constants old build environments might not have even if kernel does
 
--- toybox-0.8.12/lib/portability.c	2025-01-18 20:20:33.000000000 +0000
+++ portability.c	2025-06-12 18:40:21.178858099 +0000
@@ -5,6 +5,10 @@
  */
 
 #include "toys.h"
+#if defined(__COSMOPOLITAN__)
+#include "libc/sysv/errfuns.h"
+#include "libc/calls/makedev.h"
+#endif
 
 // We can't fork() on nommu systems, and vfork() requires an exec() or exit()
 // before resuming the parent (because they share a heap until then). And no,
@@ -216,6 +220,25 @@
   }
 }
 
+#elif defined(__COSMOPOLITAN__)
+
+struct xnotify *xnotify_init(int max)
+{
+  perror_exit("inotify_init");
+  return NULL;
+}
+
+int xnotify_add(struct xnotify *not, int fd, char *path)
+{
+  error_exit("xnotify_add overflow");
+  return 0;
+}
+
+int xnotify_wait(struct xnotify *not, char **path)
+{
+  perror_exit("inotify");
+  return 0;
+}
 #else
 
 #include <sys/inotify.h>
@@ -313,6 +336,56 @@
   return fsetxattr(fd, name, value, size, 0, flags);
 }
 
+#elif defined(__COSMOPOLITAN__)
+
+ssize_t xattr_get(const char *path, const char *name, void *value, size_t size)
+{
+  return enotsup(); // getxattr(path, name, value, size);
+}
+
+ssize_t xattr_lget(const char *path, const char *name, void *value, size_t size)
+{
+  return enotsup(); // lgetxattr(path, name, value, size);
+}
+
+ssize_t xattr_fget(int fd, const char *name, void *value, size_t size)
+{
+  return enotsup(); // fgetxattr(fd, name, value, size);
+}
+
+ssize_t xattr_list(const char *path, char *list, size_t size)
+{
+  return enotsup(); // listxattr(path, list, size);
+}
+
+ssize_t xattr_llist(const char *path, char *list, size_t size)
+{
+  return enotsup(); // llistxattr(path, list, size);
+}
+
+ssize_t xattr_flist(int fd, char *list, size_t size)
+{
+  return enotsup(); // flistxattr(fd, list, size);
+}
+
+ssize_t xattr_set(const char* path, const char* name,
+                  const void* value, size_t size, int flags)
+{
+  return enotsup(); // setxattr(path, name, value, size, flags);
+}
+
+ssize_t xattr_lset(const char* path, const char* name,
+                   const void* value, size_t size, int flags)
+{
+  return enotsup(); // lsetxattr(path, name, value, size, flags);
+}
+
+ssize_t xattr_fset(int fd, const char* name,
+                   const void* value, size_t size, int flags)
+{
+  return enotsup(); // fsetxattr(fd, name, value, size, flags);
+}
+
 #elif !defined(__FreeBSD__) && !defined(__OpenBSD__)
 
 ssize_t xattr_get(const char *path, const char *name, void *value, size_t size)
@@ -515,7 +588,7 @@
   return ((dev&0xfff00000)>>12)|(dev&0xff);
 #elif defined(__APPLE__)
   return dev&0xffffff;
-#elif defined(__FreeBSD__) || defined(__OpenBSD__)
+#elif defined(__FreeBSD__) || defined(__OpenBSD__) || defined(__COSMOPOLITAN__)
   return minor(dev);
 #else
 #error
@@ -528,7 +601,7 @@
   return (dev&0xfff00)>>8;
 #elif defined(__APPLE__)
   return (dev>>24)&0xff;
-#elif defined(__FreeBSD__) || defined(__OpenBSD__)
+#elif defined(__FreeBSD__) || defined(__OpenBSD__) || defined(__COSMOPOLITAN__)
   return major(dev);
 #else
 #error
@@ -541,7 +614,7 @@
   return (minor&0xff)|((major&0xfff)<<8)|((minor&0xfff00)<<12);
 #elif defined(__APPLE__)
   return (minor&0xffffff)|((major&0xff)<<24);
-#elif defined(__FreeBSD__) || defined(__OpenBSD__)
+#elif defined(__FreeBSD__) || defined(__OpenBSD__) || defined(__COSMOPOLITAN__)
   return makedev(major, minor);
 #else
 #error

--- toybox-0.8.12/toys/posix/cp.c	2025-01-18 20:20:33.000000000 +0000
+++ -	2025-06-12 18:48:28.833796994 +0000
@@ -277,7 +277,7 @@
             ? readlinkat0(tfd, try->name, toybuf, sizeof(toybuf)) &&
               (!unlinkat(cfd, catch, 0) || ENOENT == errno) &&
               !symlinkat(toybuf, cfd, catch)
-            : !mknodat(cfd, catch, try->st.st_mode, try->st.st_rdev))
+            : !mknod(catch, try->st.st_mode, try->st.st_rdev))
         {
           err = 0;
           fdout = AT_FDCWD;

--- toybox-0.8.12/toys/posix/cp.c	2025-06-12 18:48:50.043435848 +0000
+++ -	2025-06-12 18:50:13.321671604 +0000
@@ -126,6 +126,7 @@
   ssize_t listlen, len;
   char *name, *value, *list;
 
+#ifndef __COSMOPOLITAN__
   if (!(TT.pflags&(_CP_xattr|_CP_context))) return;
   if ((listlen = xattr_flist(fdin, 0, 0))<1) return;
 
@@ -144,6 +145,7 @@
     }
   }
   free(list);
+#endif
 }
 
 // Callback from dirtree_read() for each file/directory under a source dir.

--- toybox-0.8.12/toys/posix/tar.c	2025-01-18 20:20:33.000000000 +0000
+++ -	2025-06-12 18:53:08.940673321 +0000
@@ -389,6 +389,7 @@
     goto done;
   }
 
+#ifndef __COSMOPOLITAN__
   // write out 'x' prefix header for --selinux data
   if (FLAG(selinux)) {
     int start = 0, sz = 0, temp, len = 0;
@@ -418,6 +419,7 @@
       buf = xmprintf("%u RHT.%s=%.*s", start+len+1, sec, sz = len, "");
     }
   }
+#endif
 
   maybe_prefix_block(hname, sizeof(hdr.name), 'L');
   if (!FLAG(numeric_owner)) {

--- toybox-0.8.12/scripts/make.sh	2025-06-12 19:01:16.868284724 +0000
+++ -	2025-06-12 19:02:49.675518534 +0000
@@ -294,7 +294,7 @@
 
 # Remove write bit set so buggy installs (like bzip's) don't overwrite the
 # multiplexer binary via truncate-and-write through a symlink.
-do_loudly chmod 555 "$OUTNAME" || exit 1
+# do_loudly chmod 555 "$OUTNAME" || exit 1
 
 # Ensure make wrapper sees success return code
 [ -z "$V" ] && echo >&2 || true
