diff -r --unified git-2.42.0a/Makefile git-2.42.0/Makefile
--- git-2.42.0a/Makefile	2023-08-21 16:34:58.000000000 +0000
+++ git-2.42.0/Makefile	2023-12-05 00:01:04.889315947 +0000
@@ -20,6 +20,7 @@
 #
 # Define SHELL_PATH to a POSIX shell if your /bin/sh is broken.
 #
+SHELL_PATH=sh
 # Define SANE_TOOL_PATH to a colon-separated list of paths to prepend
 # to PATH if your tools in /usr/bin are broken.
 #
@@ -216,6 +217,7 @@
 # Define PERL_PATH to the path of your Perl binary (usually /usr/bin/perl).
 #
 # Define NO_PERL if you do not want Perl scripts or libraries at all.
+NO_PERL=1
 #
 # Define NO_PERL_CPAN_FALLBACKS if you do not want to install bundled
 # copies of CPAN modules that serve as a fallback in case the modules
@@ -232,7 +234,7 @@
 # but /usr/bin/python2.7 or /usr/bin/python3 on some platforms).
 #
 # Define NO_PYTHON if you do not want Python scripts or libraries at all.
-#
+NO_PYTHON=1
 # Define NO_TCLTK if you do not want Tcl/Tk GUI.
 #
 # The TCL_PATH variable governs the location of the Tcl interpreter
@@ -302,6 +304,7 @@
 # you want to use something different.  The value will be interpreted by the
 # shell at runtime when it is used.
 #
+DEFAULT_PAGER=less
 # Define DEFAULT_EDITOR to a sensible editor command (defaults to "vi") if you
 # want to use something different.  The value will be interpreted by the shell
 # if necessary when it is used.  Examples:
@@ -310,6 +313,7 @@
 #   DEFAULT_EDITOR='$GIT_FALLBACK_EDITOR',
 #   DEFAULT_EDITOR='"C:\Program Files\Vim\gvim.exe" --nofork'
 #
+DEFAULT_EDITOR=vim
 # Define COMPUTE_HEADER_DEPENDENCIES to "yes" if you want dependencies on
 # header files to be automatically computed, to avoid rebuilding objects when
 # an unrelated header file changes.  Define it to "no" to use the hard-coded
diff -r --unified git-2.42.0a/exec-cmd.c git-2.42.0/exec-cmd.c
--- git-2.42.0a/exec-cmd.c	2023-08-21 16:34:58.000000000 +0000
+++ git-2.42.0/exec-cmd.c	2023-12-05 00:01:04.889315947 +0000
@@ -25,6 +25,7 @@
 #endif /* RUNTIME_PREFIX */
 
 #define MAX_ARGS 32
+#undef PROCFS_EXECUTABLE_PATH
 
 static const char *system_prefix(void);
 
diff -r --unified git-2.42.0a/preload-index.c git-2.42.0/preload-index.c
--- git-2.42.0a/preload-index.c	2023-08-21 16:34:58.000000000 +0000
+++ git-2.42.0/preload-index.c	2023-12-05 00:01:04.893316387 +0000
@@ -16,6 +16,9 @@
 #include "symlinks.h"
 #include "trace2.h"
 
+#define _COSMO_SOURCE
+#include <stdbool.h>
+#include "libc/dce.h"
 /*
  * Mostly randomly chosen maximum thread counts: we
  * cap the parallelism to 20 threads, and we want
@@ -108,7 +111,7 @@
 	struct progress_data pd;
 	int t2_sum_lstat = 0;
 
-	if (!HAVE_THREADS || !core_preload_index)
+	if (IsWindows() || !HAVE_THREADS || !core_preload_index)
 		return;
 
 	threads = index->cache_nr / THREAD_COST;
diff -r --unified git-2.42.0a/ref-filter.c git-2.42.0/ref-filter.c
--- git-2.42.0a/ref-filter.c	2023-08-21 16:34:58.000000000 +0000
+++ git-2.42.0/ref-filter.c	2023-12-05 00:01:04.889315947 +0000
@@ -2948,7 +2948,7 @@
 	return 0;
 }
 
-static int memcasecmp(const void *vs1, const void *vs2, size_t n)
+static int memcasecmp2(const void *vs1, const void *vs2, size_t n)
 {
 	const char *s1 = vs1, *s2 = vs2;
 	const char *end = s1 + n;
@@ -2999,7 +2999,7 @@
 					strlen(vb->s) : vb->s_size;
 			int (*cmp_fn)(const void *, const void *, size_t);
 			cmp_fn = s->sort_flags & REF_SORTING_ICASE
-				? memcasecmp : memcmp;
+				? memcasecmp2 : memcmp;
 
 			cmp = cmp_fn(va->s, vb->s, b_size > a_size ?
 				     a_size : b_size);
diff -r --unified git-2.42.0a/run-command.c git-2.42.0/run-command.c
--- git-2.42.0a/run-command.c	2023-08-21 16:34:58.000000000 +0000
+++ git-2.42.0/run-command.c	2023-12-05 00:01:04.893316387 +0000
@@ -171,6 +171,19 @@
 }
 
 #ifndef locate_in_PATH
+#define _COSMO_SOURCE
+#include "libc/mem/gc.h"
+#include "libc/str/str.h"
+#include "libc/x/x.h"
+
+extern char* GetProgramExecutableName();
+static int cosmo_endswith(const char *s, const char *suffix) {
+  size_t n, m;
+  n = strlen(s);
+  m = strlen(suffix);
+  if (m > n) return 0;
+  return !memcmp(s + n - m, suffix, m);
+}
 /*
  * Search $PATH for a command.  This emulates the path search that
  * execvp would perform, without actually executing the command so it
@@ -190,11 +203,55 @@
  */
 static char *locate_in_PATH(const char *file)
 {
-	const char *p = getenv("PATH");
+    char *progname = _gc(strdup(GetProgramExecutableName()));
+    char *progdir = dirname(progname);
+    char *otherdir = "";
+
+    if (cosmo_endswith(progdir, "bin")) {
+        /* we are running <dir>/bin/git */
+        otherdir = _gc(xjoinpaths(progdir, "../libexec/git-core/"));
+    }
+    else if (cosmo_endswith(progdir, "libexec/git-core")) {
+        /* we are running <dir>/libexec/git-core/git */
+        otherdir = _gc(xjoinpaths(progdir, "../../bin/"));
+    }
+    else {
+        /* I don't know where we are running this */
+        otherdir = "";
+    }
+    const char *fsp = _gc(xstrcat(progdir, ":", otherdir, NULL));
+    if (!fsp) return NULL;
+
 	struct strbuf buf = STRBUF_INIT;
 
-	if (!p || !*p)
+    /* first search the paths we'd expect */
+	while (1) {
+		const char *end = strchrnul(fsp, ':');
+
+		strbuf_reset(&buf);
+
+		/* POSIX specifies an empty entry as the current directory. */
+		if (end != fsp) {
+			strbuf_add(&buf, fsp, end - fsp);
+			strbuf_addch(&buf, '/');
+		}
+		strbuf_addstr(&buf, file);
+
+		if (is_executable(buf.buf))
+			return strbuf_detach(&buf, NULL);
+
+		if (!*end)
+			break;
+		fsp = end + 1;
+	}
+
+    /* now search the other PATHs if you have to */
+	const char *p = getenv("PATH");
+	
+    if (!p || !*p) {
+	    strbuf_release(&buf);
 		return NULL;
+    }
 
 	while (1) {
 		const char *end = strchrnul(p, ':');
diff -r --unified git-2.42.0a/wrapper.c git-2.42.0/wrapper.c
--- git-2.42.0a/wrapper.c	2023-08-21 16:34:58.000000000 +0000
+++ git-2.42.0/wrapper.c	2023-12-05 00:01:04.889315947 +0000
@@ -10,6 +10,10 @@
 #include "strbuf.h"
 #include "trace2.h"
 
+extern const int SYNC_FILE_RANGE_WAIT_BEFORE;
+extern const int SYNC_FILE_RANGE_WAIT_AFTER;
+extern const int SYNC_FILE_RANGE_WRITE;
+
 #ifdef HAVE_RTLGENRANDOM
 /* This is required to get access to RtlGenRandom. */
 #define SystemFunction036 NTAPI SystemFunction036
@@ -756,11 +760,12 @@
 
 int csprng_bytes(void *buf, size_t len)
 {
-#if defined(HAVE_ARC4RANDOM) || defined(HAVE_ARC4RANDOM_LIBBSD)
+#if 0 && defined(HAVE_ARC4RANDOM) || defined(HAVE_ARC4RANDOM_LIBBSD)
 	/* This function never returns an error. */
 	arc4random_buf(buf, len);
 	return 0;
-#elif defined(HAVE_GETRANDOM)
+#elif 1 || defined(HAVE_GETRANDOM)
+#pragma message("using getrandom function")
 	ssize_t res;
 	char *p = buf;
 	while (len) {
